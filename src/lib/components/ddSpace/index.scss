// DivoDivnoe Space

@include dd-system-componentRegister(ddSpace);

$dd-space-defaultSpace: 16px !default;

$dd-space-fixedMod: fixed !default;

$dd-space-factor: (
	tiny: 0.25,
	small: 0.5,
	medium: 1,
	large: 2,
	massive: 3,
);

@if (dd-system-componentExist(ddResponsive)) {
	$dd-responsive-intervals: dd-responsive-assertToIntervals($dd-responsive-intervals, (
		spaceScale: 1,
	));
}

@function dd-space-getSpace($_factor, $_strict: false)
{
	@if (type_of($_factor) == string) {
		$_val: map_get($dd-space-factor, $_factor);
		@if ($_val != null) {
			@return round($_val * $dd-space-defaultSpace);
		} @else {
			$_: dd-system-message('Не существует размера "#{$_factor}"');
			@return null;
		}
	} @elseif (type_of($_factor) == number and unitless($_factor)) {
		@return round($_factor * $dd-space-defaultSpace);
	} @else {
		@if ($_strict) {
			$_: dd-system-message('Не правильное имя размера "#{$_factor}"');
			@return null;
		}
	}
	@return $_factor;
}

@function dd-space-getFactor($_factor)
{
	@return map_get($dd-space-factor, $_factor);
}

@mixin dd-space($_factor)
{
	display: block;
	height: dd-space-getSpace($_factor);
}

@mixin dd-space-responsive($_val)
{
	@if (dd-system-componentExist(ddResponsive)) {
		display: block;
		$_val: dd-space-getSpace($_val);
		// Генерируем вспомогательные классы Space компонента
		@each $_key, $_params in $dd-responsive-intervals {
			@include dd-responsive-media(($_key)) {
				height: $_val * map_get($_params, 'spaceScale');
			}
		}
	}
}

@mixin dd-space-generator()
{
	.#{dd-system-name(space)} {
		display: block;
		height: $dd-space-defaultSpace;
		@each $_key, $_val in $dd-space-factor {
			&.#{dd-system-name(space, $_key, _)} {
				height: dd-space-getSpace($_key);
			}
		}
	}
}

@mixin dd-space-generatorResponsive()
{
	@if (dd-system-componentExist(ddResponsive)) {
		.#{dd-system-name(space)} {
			@each $_breakKey, $_breakParams in $dd-responsive-intervals {
				@include dd-responsive-media($_breakKey) {
					height: $dd-space-defaultSpace * map_get($_breakParams, 'spaceScale');
				}
				@each $_factorKey, $_factorVal in $dd-space-factor {
					@include dd-responsive-media($_breakKey) {
						&.#{dd-system-name(space, $_factorKey, _)}:not(.#{dd-system-name(space, $dd-space-fixedMod, _)}) {
							height: dd-space-getSpace($_factorKey) * map_get($_breakParams, 'spaceScale');
						}
					}
				}
			}
		}
	}
}