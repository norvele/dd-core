/*
	DivoDivnoe Grid
	Зависит от "DivoDivnoe Responsive", "DivoDivnoe Space"
*/

$dd-grid-columns: 12 !default;
$dd-grid-gutterContainer: $dd-space-defaultSpace !default;
$dd-grid-gutterHorizontal: $dd-space-defaultSpace !default;
$dd-grid-gutterVertical: $dd-space-defaultSpace !default;

// Генерирует сетку в заданном направлении
// используя grid-подобный синтаксис
@mixin dd-grid-template($_dir, $_params) {
	$_lngs: ();
	// Формируем массив сумм величин по их измерениям
	// px: 250px, em: 100em, fr: 3fr
	@each $_param in $_params {
		@if not unitless($_param) {
			$_unit: unit($_param);
			$_newVal: null;
			@if map-has-key($_lngs, $_unit) {
				$_newVal: map-get($_lngs, $_unit) + $_param;
			} @else {
				$_newVal: $_param;
			}
			$_newMap: ($_unit:$_newVal);
			$_lngs: map-merge($_lngs, $_newMap);
		}
	}
	// Итоговая строка для calc, в виде 100% - 150px - 15em
	$_calcString: '100%';
	// Сумма для fr размерности
	$_calcSum: 0;
	@each $_unit, $_lng in $_lngs {
		@if $_unit == fr {
			$_calcSum: $_calcSum + dd-helpers-stripUnits($_lng);
		} @else {
			$_calcString: $_calcString + ' - #{$_lng}';
		}
	}

	display: flex;
	@if $_dir == row {
		flex-direction: row;
	} @else {
		flex-direction: column;
	}

	$_i: 1;
	@each $_param in $_params {
		& > *:nth-child(#{$_i}) {
			@if unitless($_param) {
				flex-grow: $_param;
				@if $_param > 0 {
					flex-shrink: 1;
				} @else {
					flex-shrink: 0;
				}
			} @else {
				flex-grow: 0;
				flex-shrink: 0;
				@if unit($_param) == fr {
					@if $_dir == row {
						width: calc((#{$_calcString}) * #{dd-helpers-stripUnits($_param)/$_calcSum});
					} @else {
						height: calc((#{$_calcString}) * #{dd-helpers-stripUnits($_param)/$_calcSum});
					}
				} @else {
					@if $_dir == row {
						width: $_param;
					} @else {
						height: $_param;
					}
				}
			}
		}
		$_i: $_i + 1;
	}
}

@mixin dd-grid-templateColumns($params...) {
	@include dd-grid-template(row, $params)
}

@mixin dd-grid-templateRows($params...) {
	@include dd-grid-template(col, $params)
}

// Для генерации отступов в grid-area
@mixin _dd-grid-mediaAreaGenerateSpace($_gutterH, $_gutterV) {
	margin-left: -$_gutterH/2;
	margin-right: -$_gutterH/2;
	margin-bottom: -$_gutterV;

	& > * {
		padding-left: $_gutterH/2;
		padding-right: $_gutterH/2;
		margin-bottom: $_gutterV;
	}

	&::after {
		height: $_gutterV;
	}
}

@mixin dd-grid-area($_gutterH: $dd-grid-gutterHorizontal, $_gutterV: $dd-grid-gutterVertical) {
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	min-width: 0;

	& > * {
		width: 100%;
	}

	&::after {
		content: '';
	}

	@include _dd-grid-mediaAreaGenerateSpace($_gutterH, $_gutterV);
}

@mixin dd-grid-cell($_grow: 1, $_shrink: 1) {
	box-sizing: border-box;
	flex-grow: $_grow;
	flex-shrink: $_shrink;
	flex-basis: auto;
	min-width: 0;
	min-height: 0;
}

@mixin _dd-grid-listMedia($_params)
{
	@if (map_get($_params, 'rowItems') != null) {
		$_params: map_merge($_params, (
			cellWidth: percentage(1/map_get($_params, 'rowItems'))
		));
	}

	margin-left: - map_get($_params, 'gutterHorizontal')/2;
	margin-right: - map_get($_params, 'gutterHorizontal')/2;
	margin-bottom: - map_get($_params, 'gutterVertical');

	& > * {
		@if (map_get($_params, 'cellWidth') != null) {
			width: map_get($_params, 'cellWidth');
			flex-grow: 0;
			flex-shrink: 0;
		}
		padding-left: map_get($_params, 'gutterHorizontal')/2;
		padding-right: map_get($_params, 'gutterHorizontal')/2;
		margin-bottom: map_get($_params, 'gutterVertical');
	}

	&::after {
		height: map_get($_params, 'gutterVertical');
	}
}

/*
	@include dd-grid-list(
		(
			rowItems: 5,
			gutterVertical: 16px,
			gutterHorizontal: small,
		),
		(
			media: ((sm, md), xl),
			rowItems: 3,
		),
		(
			media: ((360px, 500px)),
			gutterVertical: tiny,
		),
	)
*/
@mixin dd-grid-list($_args...)
{
	$_defaults: (
		rowItems: null,
		gutterVertical: $dd-grid-gutterVertical,
		gutterHorizontal: $dd-grid-gutterHorizontal,
	);
	@for $_i from 1 through length($_args) {
		$_arg: nth($_args, $_i);
		$_media: map_get($_arg, 'media');
		$_params: ();
		@if ($_media == null) {
			$_defaults: map_merge($_defaults, $_arg);
			$_params: $_defaults;
		} @else {
			$_params: map_merge($_defaults, $_arg);
		}

		$_params: map_merge($_params, (
			gutterVertical: dd-space-getSpace(map_get($_params, 'gutterVertical')),
			gutterHorizontal: dd-space-getSpace(map_get($_params, 'gutterHorizontal')),
		));

		@if ($_media == null) {
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;
			min-width: 0;

			& > * {
				@include dd-grid-cell();
			}

			&::after {
				content: '';
			}

			@include _dd-grid-listMedia($_params);

		} @else {

			@media #{dd-helpers-implode(dd-responsive-parseMedia($_media), ', ')} {
				@include _dd-grid-listMedia($_params);
			}
		}
	}
}

.#{$dd-system-classPrefix}grid {

	&-container {
		box-sizing: border-box;
		padding: 0 $dd-grid-gutterHorizontal;
		margin: 0 auto;

		&._#{$dd-system-classPrefix}fluid {
			width: 100%;
		}
	}

	&-area {
		@include dd-grid-area();
	}

	&-cell {
		@include dd-grid-cell();
	}
}

// Генерируем селектор для всех ячеек с заданным размером
$_cellSelector: '';
@each $_key, $_params in $dd-responsive-breakpoints {
	@for $j from 1 through $dd-grid-columns {
		$_cellSelector: $_cellSelector + '.#{$dd-system-classPrefix}grid-cell._#{$_key}-#{$j}';
		@if (not dd-responsive-nextBreakpoint($_key) and $j == $dd-grid-columns) {} @else {
			$_cellSelector: $_cellSelector + ', ';
		}
	}
}
// Запрещаем растягивание ячеек, для которых задан размер
#{$_cellSelector} {
	flex-grow: 0;
	flex-shrink: 0;
}

.#{$dd-system-classPrefix}grid {
	// Генерируем стили для брейкпойтнов
	@each $_key, $_params in $dd-responsive-breakpoints {
		$_cutoff: map_get($_params, 'cutoff');
		$_range: map_get($_params, 'range');
		$_minWidth: nth($_range, 1);
		$_maxWidth: nth($_range, 2);
		$_containerWidth: map_get($_params, 'containerWidth');

		$_spaceScale: map_get($_params, 'spaceScale');
		$_gutterContainer: $_spaceScale * $dd-grid-gutterContainer;
		$_gutterHorizontal: $_spaceScale * $dd-grid-gutterHorizontal;
		$_gutterVertical: $_spaceScale * $dd-grid-gutterVertical;

		// Отступы сетки
		@if ($_maxWidth) {
			@media all and ( min-width: $_minWidth ) and ( max-width: $_maxWidth ) {
				&-area {
					@include _dd-grid-mediaAreaGenerateSpace($_gutterHorizontal, $_gutterVertical);
				}
			}
		} @else {
			@media all and ( min-width: $_minWidth ) {
				&-area {
					@include _dd-grid-mediaAreaGenerateSpace($_gutterHorizontal, $_gutterVertical);
				}
			}
		}
		// Размеры ячеек сетки
		@media all and ( min-width: $_minWidth ) {
			&-container {
				width: $_containerWidth;
				padding: 0 $_gutterContainer;
			}
			@for $j from 1 through $dd-grid-columns {
				&-area {
					& > .#{$dd-system-classPrefix}grid-cell._#{$_key}-#{$j} {
						width: percentage($j / $dd-grid-columns);
					}
				}
			}
		}
	}
}