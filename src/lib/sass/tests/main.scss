@import 'testKit/main.scss';

// Отключаем вывод предупреждений библиотеки
$dd-system-debug: false;

// Helpers

@include test-assert('equal', (
	dd-helpers-stripUnits(20px),
	20
), 'Helpers: strip units');

@include test-assert('equal', (
	dd-helpers-decimalRound(20.467, 1, round),
	20.5
), 'Helpers: decimal round');

@include test-assert('equal', (
	dd-helpers-decimalRound(20.467, 1, floor),
	20.4
), 'Helpers: decimal floor');

@include test-assert('equal', (
	dd-helpers-getMean(1, 3),
	2
), 'Helpers: get mean');

@include test-assert('equal', (
	dd-helpers-getMean(1, 3, 0.8, 1),
	2.6
), 'Helpers: get mean decimal');

@include test-assert('equal', (
	dd-helpers-implode(('test', 2, 20px), ', '),
	'test, 2, 20px'
), 'Helpers: implode');

@include test-assert('equal', (
	dd-helpers-capitalize('test string'),
	'Test string'
),'Helpers: capitalize');

//  Space

$_test-snapshot: (
	dd-space-defaultSpace: $dd-space-defaultSpace,
	dd-space-factor: $dd-space-factor,
);
$dd-space-defaultSpace: 20px;
$dd-space-factor: (
	tiny: 0.25,
	small: 0.5,
	medium: 1,
	large: 2,
	massive: 4,
);

@include test-assert('equal', (
	dd-space-getSpace(small),
	10px
), 'Space: get space');

@include test-assert('equal', (
	dd-space-getSpace(15px),
	15px
), 'Space: get space no strict');

@include test-assert('equal', (
	dd-space-getSpace(15px, true),
	null
), 'Space: get space strict');

@include test-assert('equal', (
	dd-space-getSpace(2),
	40px
), 'Space: get space custom factor');

$dd-space-defaultSpace: map_get($_test-snapshot, dd-space-defaultSpace);
$dd-space-factor: map_get($_test-snapshot, dd-space-factor);

// Responsive

$_test-snapshot: (
	dd-responsive-breakpoints: $dd-responsive-breakpoints,
	dd-space-defaultSpace: $dd-space-defaultSpace,
);
$dd-responsive-breakpoints: (
	xs: (
		cutoff: 0,
		containerWidth: 100%,
		spaceScale: 0.5,
	),
	sm: (
		range: (544px, 767px),
	),
);

@include test-assert('equal', (
	dd-responsive-normalizeBreakpoints($dd-responsive-breakpoints),
	(
		xs: (
			cutoff: 0,
			containerWidth: 100%,
			range: (0, 543px),
			spaceScale: 0.5,
		),
		sm: (
			cutoff: 544px,
			containerWidth: 544px,
			range: (544px, 767px),
			spaceScale: 1,
		),
	)
), 'Responsive: normalize breakpoints');

$dd-responsive-breakpoints: map_get($_test-snapshot, dd-responsive-breakpoints);

$_test-snapshot: (
	dd-responsive-breakpoints: $dd-responsive-breakpoints,
);
$dd-responsive-breakpoints: dd-responsive-normalizeBreakpoints((
	xs: (
		cutoff: 0,
	),
	sm: (
		cutoff: 544px,
	),
	md:(
		cutoff: 768px,
	),
	lg:(
		cutoff: 992px,
	),
	xl:(
		cutoff: 1200px,
	),
));

@include test-assert('equal', (
	dd-responsive-parseMedia((sm, md), lg),
	(
		'all and (min-width: 544px) and (max-width: 991px)',
		'all and (min-width: 992px) and (max-width: 1199px)',
	)
), 'Responsive: parse media 1');

@include test-assert('equal', (
	dd-responsive-parseMedia(sm, lg),
		(
			'all and (min-width: 544px) and (max-width: 767px)',
			'all and (min-width: 992px) and (max-width: 1199px)',
		)
), 'Responsive: parse media 2');

@include test-assert('equal', (
	dd-responsive-parseMedia((sm, 800px), xl, (100px, 200px)),
		(
			'all and (min-width: 544px) and (max-width: 800px)',
			'all and (min-width: 1200px)',
			'all and (min-width: 100px) and (max-width: 200px)',
		)
), 'Responsive: parse media 3');

@include test-assert('equal', (
	dd-responsive-parseMedia((xs, 600px)),
		(
			'all and (min-width: 0) and (max-width: 600px)',
		)
), 'Responsive: parse media 4');

$dd-responsive-breakpoints: map_get($_test-snapshot, dd-responsive-breakpoints);

// Print result

@include test-output();

