@import 'utils';

$test-printPassed: false !default;
$test-printFailed: true !default;
$test-printFullFailed: true !default;
$test-printExploded: false !default;
$_test-count: 0;
$_test-output: '';
$_test-failCount: 0;
$_test-snapshot: ();

@mixin test-assert($_method, $_args, $_name: null)
{
	$_test-count: $_test-count + 1 !global;
	$_output: '\a';
	$_methodFullName: 'test-assert#{test-util-capitalize($_method)}';
	@if ($_name == null) {
		$_name: '##{$_test-count}';
	}
	@if (function_exists($_methodFullName)) {
		$_result: call($_methodFullName, $_args...);
		@if ($_result != null) {
			@if ($test-printFailed) {
				$_test-failCount: $_test-failCount + 1 !global;
				$_output: '#{$_output}✘ Failed! Test "#{$_name}"';
				@if ($test-printFullFailed) {
					$_output: '#{$_output}\a    -> #{$_result}';
				}
				@if ($test-printExploded) {
					@debug $_output;
				} @else {
					$_test-output: $_test-output + $_output !global;
				}
			}
		} @else {
			@if ($test-printPassed) {
				$_output: '#{$_output}✔ Passed: Test "#{$_name}"';
				@if ($test-printExploded) {
					@debug $_output;
				} @else {
					$_test-output: $_test-output + $_output !global;
				}
			}
		}
	} @else {
		@error 'Test method "#{$_method}" not exists';
	}
}

@mixin test-reset()
{
	$_test-count: 0 !global;
	$_test-output: '' !global;
	$_test-failCount: 0 !global;
	$_test-snapshot: () !global;
}

@mixin test-output($_reset: true)
{
	@if ($test-printPassed or $_test-failCount > 0) {
		@debug '\a\aStarted tests\a------------------------------#{$_test-output}\a------------------------------\aOver #{$_test-failCount} test(s) out of #{$_test-count} failing\a';
		@if ($_reset) {
			@include test-reset();
		}
	}
}

@function test-assertEqual($_val1, $_val2)
{
	@if (type-of($_val2) == color) {
		@if ('#{$_val1}' != '#{$_val2}') {
			@return 'Value "#{$_val1}" not equal "#{$_val2}"';
		} @else {
			@return null;
		}
	}
	@if ($_val1 != $_val2) {
		@return 'Value "#{inspect($_val1)}" not equal "#{inspect($_val2)}"';
	}
	@return null;
}