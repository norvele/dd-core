////
/// DivoDivnoe Grid
/// Реализует сетки
/// @group grid
////

@include dd-system-componentRegister(dd-grid, (dd-responsive, dd-space));

/// Кол-во колонок в сетке
/// @type Number
/// @example
/// $dd-grid-columns: 12;
$dd-grid-columns: $dd-system-undefinedValue !default;

/// Горизонтальный отступ между ячейками
/// @type Number
/// @example
/// $dd-grid-gutterHorizontal: $dd-space-defaultSpace;
$dd-grid-gutterHorizontal: $dd-system-undefinedValue !default;

/// Вертикальный отступ между ячейками
/// @type
/// @example
/// $dd-grid-gutterVertical: $dd-space-defaultSpace;
$dd-grid-gutterVertical: $dd-system-undefinedValue !default;

/// Динамические отступы (в зависимости от текущего интервала)
/// Расчет осуществляется на основании параметра spaceScale переменной $dd-responsive-intervals
/// @type Boolean
/// @see $dd-responsive-intervals
/// @example
/// $dd-grid-gutterDynamic: true;
$dd-grid-gutterDynamic: $dd-system-undefinedValue !default;

/// Генерировать классы для контроля размера отступов
/// На основании переменной $dd-space-factor
/// @type Boolean
/// @see $dd-space-factor
/// @example
/// $dd-grid-gutterSpaces: true;
$dd-grid-gutterSpaces: $dd-system-undefinedValue !default;

/// Генерировать классы для отключения отступов
/// @type Boolean
/// @example
/// $dd-grid-gutterDisables: true;
$dd-grid-gutterDisables: $dd-system-undefinedValue !default;

/// Имя класса для отключения отступов
/// @type String
/// @example
/// $dd-grid-noGuttersMod: none;
$dd-grid-noGuttersMod: $dd-system-undefinedValue !default;

@function dd-grid-bootstrap() {
    @if ($dd-grid-columns == $dd-system-undefinedValue) {
        $dd-grid-columns: 12 !global;
    }
    @if ($dd-grid-gutterHorizontal == $dd-system-undefinedValue) {
        $dd-grid-gutterHorizontal: $dd-space-defaultSpace !global;
    }
    @if ($dd-grid-gutterVertical == $dd-system-undefinedValue) {
        $dd-grid-gutterVertical: $dd-space-defaultSpace !global;
    }
    @if ($dd-grid-gutterDynamic == $dd-system-undefinedValue) {
        $dd-grid-gutterDynamic: true !global;
    }
    @if ($dd-grid-gutterSpaces == $dd-system-undefinedValue) {
        $dd-grid-gutterSpaces: true !global;
    }
    @if ($dd-grid-gutterDisables == $dd-system-undefinedValue) {
        $dd-grid-gutterDisables: true !global;
    }
    @if ($dd-grid-noGuttersMod == $dd-system-undefinedValue) {
        $dd-grid-noGuttersMod: none !global;
    }

    @return true;
}

/// Создает статичные отступы
/// Добавляет внешние и внутренние отступы равные половине расстояния между ячейками
/// @param {Number | null} $gutterH - горизонтальный отступ между ячейками
/// @param {Number | null} $gutterV - вертикальный отступ между ячейками
/// @param {Boolean} $container [false] - флаг контейнера, будут сгенерированы только внутренние отступы равные $gutterH и $gutterV
@mixin _dd-grid-guttersStatic($gutterH: null, $gutterV: null, $container: false) {
    @if ($container == true) {
        @if ($gutterH != null) {
            padding-left: $gutterH;
            padding-right: $gutterH;
        }
        @if ($gutterV != null) {
            padding-top: $gutterV;
            padding-bottom: $gutterV;
        }
    } @else {
        > * {
            @if ($gutterH != null) {
                padding-left: $gutterH/2;
                padding-right: $gutterH/2;
            }
            @if ($gutterV != null) {
                padding-top: $gutterV/2;
                padding-bottom: $gutterV/2;
            }
        }
        @if ($gutterH != null) {
            margin-left: -$gutterH/2;
            margin-right: -$gutterH/2;
        }
        @if ($gutterV != null) {
            margin-top: -$gutterV/2;
            margin-bottom: -$gutterV/2;
        }
    }
}

/// Создает динамичные отступы (в зависимости от текущего интервала)
/// Расчет осуществляется на основании параметра spaceScale переменной $dd-responsive-intervals
/// @param {Number | null} $gutterH - горизонтальный отступ между ячейками
/// @param {Number | null} $gutterV - вертикальный отступ между ячейками
/// @param {Boolean} $container [false] - флаг контейнера, будут сгенерированы только внутренние отступы равные $gutterH и $gutterV
@mixin _dd-grid-guttersDynamic($gutterH: null, $gutterV: null, $container: false) {
    @each $intervalKey, $intervalParams in $dd-responsive-intervals {
        $range: map_get($intervalParams, 'range');
        $minWidth: nth($range, 1);
        $maxWidth: nth($range, 2);
        $spaceScale: map_get($intervalParams, 'spaceScale');

        $newGutterH: if($gutterH != null, $spaceScale * $gutterH, null);
        $newGutterV: if($gutterV != null, $spaceScale * $gutterV, null);

        @if ($maxWidth) {
            @media all and (min-width: $minWidth) and (max-width: $maxWidth) {
                @include _dd-grid-guttersStatic(
                    $gutterH: $newGutterH,
                    $gutterV: $newGutterV,
                    $container: $container
                );
            }
        } @else {
            @media all and (min-width: $minWidth) {
                @include _dd-grid-guttersStatic(
                    $gutterH: $newGutterH,
                    $gutterV: $newGutterV,
                    $container: $container
                );
            }
        }
    }
}

/// Создает статичные отступы с возможностью в разметке указывать размер отступа
/// Размер назначается именем на основании переменной $dd-space-factor
/// Например могут быть сгенерированы такие классы-модификаторы:
/// _dd-gutters-small - сделать все отступы маленькими
/// _dd-gutters-v-large - сделать вертикальные отступы большими
/// @param {Number | null} $gutterH - горизонтальный отступ между ячейками
/// @param {Number | null} $gutterV - вертикальный отступ между ячейками
/// @param {Boolean} $container [false] - флаг контейнера, будут сгенерированы только внутренние отступы равные $gutterH и $gutterV
@mixin _dd-grid-guttersStaticSpaces($gutterH: null, $gutterV: null, $container: false) {
    @each $factorKey, $factorVal in $dd-space-factor {
        $newGutterH: if($gutterH != null, $factorVal * $gutterH, null);
        $newGutterV: if($gutterV != null, $factorVal * $gutterV, null);

        &.#{dd-system-name(grid, (gutters, h, $factorKey), _)},
        &.#{dd-system-name(grid, (gutters, $factorKey), _)} {
            @include _dd-grid-guttersStatic(
                $gutterH: $newGutterH,
                $gutterV: null,
                $container: $container
            );
        }

        &.#{dd-system-name(grid, (gutters, v, $factorKey), _)},
        &.#{dd-system-name(grid, (gutters, $factorKey), _)} {
            @include _dd-grid-guttersStatic(
                $gutterH: null,
                $gutterV: $newGutterV,
                $container: $container
            );
        }
    }
}

/// Создает динамичные отступы (в зависимости от текущего интервала)
/// с возможностью в разметке указывать размер отступа
/// Размер назначается именем на основании переменной $dd-space-factor
/// Например могут быть сгенерированы такие классы-модификаторы:
/// _dd-gutters-small - сделать все отступы маленькими
/// _dd-gutters-v-large - сделать вертикальные отступы большими
/// @param {Number | null} $gutterH - горизонтальный отступ между ячейками
/// @param {Number | null} $gutterV - вертикальный отступ между ячейками
/// @param {Boolean} $container [false] - флаг контейнера, будут сгенерированы только внутренние отступы равные $gutterH и $gutterV
@mixin _dd-grid-guttersDynamicSpaces($gutterH: null, $gutterV: null, $container: false) {
    @each $intervalKey, $intervalParams in $dd-responsive-intervals {
        $range: map_get($intervalParams, 'range');
        $minWidth: nth($range, 1);
        $maxWidth: nth($range, 2);
        $spaceScale: map_get($intervalParams, 'spaceScale');

        $newGutterH: if($gutterH != null, $spaceScale * $gutterH, null);
        $newGutterV: if($gutterV != null, $spaceScale * $gutterV, null);

        @if ($maxWidth) {
            @media all and (min-width: $minWidth) and (max-width: $maxWidth) {
                @include _dd-grid-guttersStaticSpaces(
                    $gutterH: $newGutterH,
                    $gutterV: $newGutterV,
                    $container: $container
                );
            }
        } @else {
            @media all and (min-width: $minWidth) {
                @include _dd-grid-guttersStaticSpaces(
                    $gutterH: $newGutterH,
                    $gutterV: $newGutterV,
                    $container: $container
                );
            }
        }
    }
}

/// Создает отступы для ячеек сетки или контейнера
/// @param {Number | null} $gutterH - горизонтальный отступ между ячейками
/// @param {Number | null} $gutterV - вертикальный отступ между ячейками
/// @param {Boolean} $container [false] - флаг контейнера, будут сгенерированы только внутренние отступы равные $gutterH и $gutterV
/// @param {Boolean} $gutterDynamic [false] - генерировать ли динамические отступы (на основании параметра spaceScale текущего интервала)
/// @param {Boolean} $gutterSpaces [false] - генерировать классы-модификаторы для изменения отступов на основании переменной $dd-space-factor
/// @param {Boolean} $gutterDisables [false] - генерировать классы-модификаторы для отключения отступов
@mixin dd-grid-gutters(
    $gutterH: null,
    $gutterV: null,
    $container: false,
    $gutterDynamic: false,
    $gutterSpaces: false,
    $gutterDisables: false
) {
    @if ($gutterDynamic) {
        @include _dd-grid-guttersDynamic(
            $gutterH: $gutterH,
            $gutterV: $gutterV,
            $container: $container
        );

        @if ($gutterSpaces) {
            @include _dd-grid-guttersDynamicSpaces(
                $gutterH: $gutterH,
                $gutterV: $gutterV,
                $container: $container
            );
        }
    } @else {
        @include _dd-grid-guttersStatic(
            $gutterH: $gutterH,
            $gutterV: $gutterV,
            $container: $container
        );

        @if ($gutterSpaces) {
            @include _dd-grid-guttersStaticSpaces(
                $gutterH: $gutterH,
                $gutterV: $gutterV,
                $container: $container
            );
        }
    }

    @if ($gutterDisables) {
        &.#{dd-system-name(grid, (gutters, $dd-grid-noGuttersMod), _)} {
            @include _dd-grid-guttersStatic(
                $gutterH: 0,
                $gutterV: 0,
                $container: $container
            );
        }

        &.#{dd-system-name(grid, (gutters, h, $dd-grid-noGuttersMod), _)} {
            @include _dd-grid-guttersStatic(
                $gutterH: 0,
                $gutterV: null,
                $container: $container
            );
        }

        &.#{dd-system-name(grid, (gutters, v, $dd-grid-noGuttersMod), _)} {
            @include _dd-grid-guttersStatic(
                $gutterH: null,
                $gutterV: 0,
                $container: $container
            );
        }
    }
}

/// Создает ячейку сетки
/// @param {Number} $grow - значение flex-grow
/// @param {Number} $shrink - значение flex-shrink
@mixin dd-grid-cell($grow: 0, $shrink: 0) {
    box-sizing: border-box;
    flex-basis: auto;
    flex-grow: $grow;
    flex-shrink: $shrink;
    max-width: 100%;
    min-height: 0;
    min-width: 0;
}

/// Создает сетку
/// @param {Number | null} $gutterH - горизонтальный отступ между ячейками
/// @param {Number | null} $gutterV - вертикальный отступ между ячейками
/// @param {Boolean} $gutterDynamic [false] - генерировать ли динамические отступы (на основании параметра spaceScale текущего интервала)
/// @param {Boolean} $gutterSpaces [false] - генерировать классы-модификаторы для изменения отступов на основании переменной $dd-space-factor
/// @param {Boolean} $gutterDisables [false] - генерировать классы-модификаторы для отключения отступов
@mixin dd-grid-area(
    $gutterH: null,
    $gutterV: null,
    $gutterDynamic: false,
    $gutterSpaces: false,
    $gutterDisables: false
) {
    $gutterH: dd-space-getSpace($gutterH);
    $gutterV: dd-space-getSpace($gutterV);

    @include dd-grid-gutters(
        $gutterH: $gutterH,
        $gutterV: $gutterV,
        $gutterDynamic: $gutterDynamic,
        $gutterSpaces: $gutterSpaces,
        $gutterDisables: $gutterDisables
    );

    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    min-width: 0;

    > * {
        @include dd-grid-cell();
        width: auto;
    }

    @if ($gutterV != 0 and $gutterV != null) {
        &:empty::after {
            content: '';
            height: $gutterV*2;
        }
    }
}

/// Создает контейнер
/// @param {Number | null} $gutterH - горизонтальные внутренние отступы
/// @param {Number | null} $gutterV - вертикальные внутренние отступы
/// @param {Boolean} $gutterDynamic [false] - генерировать ли динамические отступы (на основании параметра spaceScale текущего интервала)
/// @param {Boolean} $gutterSpaces [false] - генерировать классы-модификаторы для изменения отступов на основании переменной $dd-space-factor
/// @param {Boolean} $gutterDisables [false] - генерировать классы-модификаторы для отключения отступов
@mixin dd-grid-container(
    $gutterH: null,
    $gutterV: null,
    $gutterDynamic: false,
    $gutterSpaces: false,
    $gutterDisables: false
) {
    $gutterH: dd-space-getSpace($gutterH);
    $gutterV: dd-space-getSpace($gutterV);

    @include dd-grid-gutters(
        $gutterH: $gutterH,
        $gutterV: $gutterV,
        $gutterDynamic: $gutterDynamic,
        $gutterSpaces: $gutterSpaces,
        $gutterDisables: $gutterDisables,
        $container: true
    );

    box-sizing: border-box;
}

@mixin dd-grid-generate() {
    .#{dd-system-name(grid, container)} {
        @include dd-grid-container(
            $gutterH: $dd-grid-gutterHorizontal,
            $gutterV: $dd-grid-gutterVertical,
            $gutterDynamic: $dd-grid-gutterDynamic,
            $gutterSpaces: $dd-grid-gutterSpaces,
            $gutterDisables: $dd-grid-gutterDisables
        );
    }

    .#{dd-system-name(grid, area)} {
        @include dd-grid-area(
            $gutterH: $dd-grid-gutterHorizontal,
            $gutterV: $dd-grid-gutterVertical,
            $gutterDynamic: $dd-grid-gutterDynamic,
            $gutterSpaces: $dd-grid-gutterSpaces,
            $gutterDisables: $dd-grid-gutterDisables
        );

        @if (dd-system-componentExist(dd-modifier)) {
            @include dd-modifier(justify-center, (prefix: $dd-system-classPrefix)) {
                justify-content: center;
            }
            @include dd-modifier(align-center, (prefix: $dd-system-classPrefix)) {
                align-items: center;
            }
            @include dd-modifier(center, (prefix: $dd-system-classPrefix)) {
                align-items: center;
                justify-content: center;
            }
            @include dd-modifier(nowrap, (prefix: $dd-system-classPrefix)) {
                flex-wrap: nowrap;
            }
            @include dd-modifier(layout-auto, (prefix: $dd-system-classPrefix)) {
                > * {
                    width: auto;
                    flex-grow: 1;
                    flex-shrink: 1;
                }
            }
        }

        > * {
            @include dd-modifier(size-auto, (prefix: $dd-system-classPrefix)) {
                width: auto;
                flex-grow: 1 !important;
                flex-shrink: 1 !important;
            }
        }
    }

    // Генерируем стили для брейкпойтнов
    @each $intervalKey, $intervalParams in $dd-responsive-intervals {
        $range: map_get($intervalParams, 'range');
        $minWidth: nth($range, 1);
        $containerWidth: map_get($intervalParams, 'containerWidth');

        // Размеры ячеек сетки
        @media all and (min-width: $minWidth) {
            .#{dd-system-name(grid, container)}.#{dd-system-name(grid, main, _)} {
                width: $containerWidth;
            }
            @for $j from 1 through $dd-grid-columns {
                .#{dd-system-name(grid, area)} {
                    > .#{dd-system-name(grid, (size, $j, $intervalKey), _)} {
                        width: percentage($j / $dd-grid-columns);
                    }

                    > .#{dd-system-name(grid, (offset, $j, $intervalKey), _)} {
                        margin-left: percentage($j / $dd-grid-columns);
                    }
                }

                .#{dd-system-name(grid, container)} {
                    &.#{dd-system-name(grid, (size, $j, $intervalKey), _)} {
                        width: percentage($j / $dd-grid-columns);
                    }

                    &.#{dd-system-name(grid, (offset, $j, $intervalKey), _)} {
                        margin-left: percentage($j / $dd-grid-columns);
                    }
                }
            }
        }
    }
}
