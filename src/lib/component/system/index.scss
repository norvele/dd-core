////
/// DivoDivnoe System
/// @group system
////
@import '../util/index';

$dd-system-undefinedValue: undefined !default;

/// If true - run bootstrap and generators automatically
/// @type Bool
$dd-system-autoRun: true !default;

/// Contain list of registered components
/// @type List
$_dd-system-components: (dd-system, dd-util);

/// Processing of vars
/// @return {bool} only true
@function dd-system-bootstrap() {
    /// Prefix for all generated classes
    /// @type String
    $dd-system-classPrefix: 'dd-' !default !global;
    /// If true - display debug messages
    /// @type Bool
    $dd-system-debug: true !default !global;
    /// Map of paths
    /// @type Map
    $dd-system-paths: (
        root: '../',
    ) !default !global;
    @return true;
}

@function _dd-system-message($_message, $_type: 'warn') {
    @if ($dd-system-debug) {
        /* stylelint-disable at-rule-blacklist */
        @if ($_type == 'warn') {
            @warn $_message;
        } @else if ($_type == 'error') {
            @error $_message;
        } @else {
            @debug $_message;
        }
        /* stylelint-enable */
    }
    @return null;
}

@mixin dd-system-message($_message, $_type: 'warn') {
    $_trash: _dd-system-message($_message, $_type);
}

@function dd-system-message($_message, $_type: 'warn') {
    @return _dd-system-message($_message, $_type);
}

@function dd-system-componentListOfMissing($_components...) {
    $_notFoundComponents: ();
    @each $_component in $_components {
        @if ((null == index($_dd-system-components, $_component))) {
            $_notFoundComponents: append($_notFoundComponents, $_component);
        }
    }
    @return $_notFoundComponents;
}

@function dd-system-componentExist($_components, $_message: true) {
    $_result: true;
    @if (type_of($_components) != list) {
        $_components: ($_components);
    }
    @each $_component in $_components {
        @if ((null == index($_dd-system-components, $_component))) {
            $_result: false;
        }
    }
    @if ($_result == false) {
        @if ($_message == true) {
            $_missing: dd-system-componentListOfMissing($_components...);
            $_trash: dd-system-message('Не найдены следующие зависимости: #{$_missing}', warn);
        }
        @if (type_of($_message) == string) {
            $_trash: dd-system-message($_message, warn);
        }
    }
    @return $_result;
}

@function dd-system-componentRegister($_component, $_dependencies: ()) {
    @if (dd-system-componentExist($_component, false)) {
        $_trash: dd-system-message('Компонент #{$_component} уже существует', error);
        @return false;
    }
    $_dependenciesNotExists: dd-system-componentListOfMissing($_dependencies...);
    @if (length($_dependenciesNotExists) > 0) {
        $_trash: dd-system-message('Для #{$_component} не найдены следующие зависимости: #{$_dependenciesNotExists}', error);
        @return true;
    }
    $_dd-system-components: append($_dd-system-components, $_component) !global;
    @return true;
}

@mixin dd-system-componentRegister($_component, $_dependencies: ()) {
    $_trash: dd-system-componentRegister($_component, $_dependencies);
}

@function dd-system-path($_prefix, $_path) {
    @return #{map_get($dd-system-paths, $_prefix)}#{$_path};
}

// $_component: grid, responsive, etc...
// $_nodes: list of elements or one element, for example: (size, small, 6, lg)
// $_mod: __ or _ or -
// $_prefix: custom prefix
@function dd-system-name($_component, $_nodes: null, $_mod: null, $_prefix: $dd-system-classPrefix) {
    $_prefix: dd-util-assertRule($_prefix, '');
    $_result: '';
    @if ($_mod != null) {
        $_result: $_mod + $_prefix;
    } @else {
        $_result: $_prefix + $_component;
        @if ($_nodes != null) {
            $_result: $_result + '-';
        }
    }
    $_result: $_result + dd-util-implode($_nodes, '-');
    @return $_result;
}

@mixin dd-system-bootstrap() {
    @each $_component in $_dd-system-components {
        $_name: '#{$_component}-bootstrap';
        @if function_exists($_name) {
            $_trash: call($_name);
        }
    }
}
